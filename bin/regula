#!/bin/bash
# Copyright 2020 Fugue, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
set -o nounset -o errexit -o pipefail

# Basic command line argument handling.
if [[ $# -lt 1 ]]; then
  1>&2 echo "Usage: $0 [TERRAFORM_DIR or TERRAFORM_PLAN_JSON] [REGO_PATHS..]"
  1>&2 echo ""
  1>&2 echo "Regula is a little wrapper to run Rego validations on terraform"
  1>&2 echo "files.  It is meant to be used as a pre-flight check before"
  1>&2 echo "deployment."
  exit 1
fi

if [[ -d "$1" ]]; then
    TERRAFORM_DIR="$1"
elif [[ -f "$1" ]]; then
    TERRAFORM_PLAN_JSON="$1"
else
    1>&2 echo "Error: $1 should be a file or directory"
    exit 1
fi
shift 1
REGO_PATHS=("$@")

# Setting this variable will cause terraform to print a little less information
# on what to do next.
TF_IN_AUTOMATION=true

# Allow overriding terraform version.
TERRAFORM="${TERRAFORM:-terraform}"

# Hide the output of a command only if it succeeds.
function silently {
  local log="$(mktemp -t silently.XXXXXXX)"
  local exit_code=""
  1>&2 echo "${1+$@}"
  ${1+"$@"} >"$log" 2>&1 || exit_code=$?
  if [[ ! -z $exit_code ]]; then
    1>&2 echo "${1+$@} failed; output ($log):"
    1>&2 cat "$log"
    exit $exit_code
  fi
  rm "$log"
}

if [[ ! -v TERRAFORM_PLAN_JSON ]] ; then #TERRAFORM_PLAN_JSON provided as a parameter

  # Temporary files.
  TERRAFORM_PLAN="$(mktemp -t plan.XXXXXXX)"
  TERRAFORM_PLAN_JSON="$(mktemp -t plan.json.XXXXXXX)"
  function cleanup {
      rm -f "$TERRAFORM_PLAN" "$TERRAFORM_PLAN_JSON"
  }
  trap cleanup exit


  # Run terraform to obtain the plan.
  (cd "$TERRAFORM_DIR" &&
      silently "$TERRAFORM" init &&
      silently "$TERRAFORM" plan -refresh=false -out="$TERRAFORM_PLAN" &&
      "$TERRAFORM" show -json "$TERRAFORM_PLAN" >"$TERRAFORM_PLAN_JSON")

fi

# Prepend `-d` to every argument because `opa` expects to see many `-d`
# arguments.
D_REGO_PATHS=()
for p in "${REGO_PATHS[@]}"; do
    D_REGO_PATHS+=('-d')
    D_REGO_PATHS+=("$p")
done

# Finally, run OPA on the result to get out our report.
opa eval -i "$TERRAFORM_PLAN_JSON" \
    "${D_REGO_PATHS[@]}" \
    'data.fugue.regula.report'
