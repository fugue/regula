#!/bin/bash
# Copyright 2020 Fugue, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
set -o nounset -o errexit -o pipefail

# Basic command line argument handling.
function print_usage {
  echo
  echo "Usage: regula [options]"
  echo
  echo
  echo "Options:"
  echo
  echo -e "  --terraform-dir\t terraform directory to run terraform plan"
  echo -e "  --terraform-json\t Use terraform plan in json format instead of calling terraform plan to generate json file"
  echo -e "  --rego-paths\t\t he directories that need to be searched for Rego code. This should at least include lib/. Can be called multiple times"
  echo -e "  --help\t\t Show this help text and exit."
  echo
  echo "Example:"
  echo
  echo "  regula --terraform-dir ../my-tf-infra "
   echo "  regula --terraform-json ../my-tf-infra.json --rego-paths lib  --rego-paths  examples/aws/ec2_t2_only.rego "
}
REGO_PATHS=()

while [[ $# -gt 0 ]]; do
    key="$1"

    case "$key" in
      --terraform-dir)
        TERRAFORM_DIR="$2"
        shift
        ;;
     
      --terraform-json)
        TERRAFORM_PLAN_JSON="$2"
        shift
        ;;
      --rego-paths)
        REGO_PATHS+=("$2")
        echo "$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        echo "ERROR: Unrecognized option: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

if [[ ! -v TERRAFORM_DIR ]] && [[ ! -v TERRAFORM_PLAN_JSON ]] ; then
    echo "You must specify --terraform-dir or --terraform-json. Both cannot be empty at the same time"
    exit 1
fi
# Setting this variable will cause terraform to print a little less information
# on what to do next.
TF_IN_AUTOMATION=true

# Allow overriding terraform version.
TERRAFORM="${TERRAFORM:-terraform}"

# Hide the output of a command only if it succeeds.
function silently {
  local log="$(mktemp -t silently.XXXXXXX)"
  local exit_code=""
  1>&2 echo "${1+$@}"
  ${1+"$@"} >"$log" 2>&1 || exit_code=$?
  if [[ ! -z $exit_code ]]; then
    1>&2 echo "${1+$@} failed; output ($log):"
    1>&2 cat "$log"
    exit $exit_code
  fi
  rm "$log"
}

if [[ ! -v TERRAFORM_PLAN_JSON ]] ; then #TERRAFORM_PLAN_JSON provided as a parameter

  # Temporary files.
  TERRAFORM_PLAN="$(mktemp -t plan.XXXXXXX)"
  TERRAFORM_PLAN_JSON="$(mktemp -t plan.json.XXXXXXX)"
  function cleanup {
      rm -f "$TERRAFORM_PLAN" "$TERRAFORM_PLAN_JSON"
  }
  trap cleanup exit


  # Run terraform to obtain the plan.
  (cd "$TERRAFORM_DIR" &&
      silently "$TERRAFORM" init &&
      silently "$TERRAFORM" plan -refresh=false -out="$TERRAFORM_PLAN" &&
      "$TERRAFORM" show -json "$TERRAFORM_PLAN" >"$TERRAFORM_PLAN_JSON")

fi

# Prepend `-d` to every argument because `opa` expects to see many `-d`
# arguments.
D_REGO_PATHS=()
for p in "${REGO_PATHS[@]}"; do
    D_REGO_PATHS+=('-d')
    D_REGO_PATHS+=("$p")
done

# Finally, run OPA on the result to get out our report.
opa eval -i "$TERRAFORM_PLAN_JSON" \
    "${D_REGO_PATHS[@]}" \
    'data.fugue.regula.report'
