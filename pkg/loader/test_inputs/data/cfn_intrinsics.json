{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Invalid public function configuration",
    "Resources": {
        "FunctionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "Path": "/"
            }
        },
        "Function": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": "exports.handler = (event, context) => {\n  console.log(JSON.stringify(event))\n}\n"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "FunctionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x"
            }
        },
        "FunctionPermissionByArn": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "Function",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "*"
            }
        },
        "Function2": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": "exports.handler = (event, context) => {\n  console.log(JSON.stringify(event))\n}\n"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "FunctionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x"
            }
        },
        "FunctionPermissionByRef": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "Function2"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "*"
            }
        },
        "Function3": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": "exports.handler = (event, context) => {\n  console.log(JSON.stringify(event))\n}\n"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "FunctionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x"
            }
        },
        "FunctionPermissionByPartialArn": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::Sub": "${AWS::AccountId}:${Function3}"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "*"
            }
        },
        "Function4": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": "function4",
                "Code": {
                    "ZipFile": "exports.handler = (event, context) => {\n  console.log(JSON.stringify(event))\n}\n"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "FunctionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x"
            }
        },
        "FunctionPermissionByHardcodedName": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": "function4",
                "Action": "lambda:InvokeFunction",
                "Principal": "*"
            }
        },
        "Function5Alias": {
            "Type": "AWS::Lambda::Alias",
            "Properties": {
                "FunctionName": {
                    "Ref": "Function5"
                },
                "FunctionVersion": "$LATEST",
                "Name": "v1"
            }
        },
        "Function5": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": "function5",
                "Code": {
                    "ZipFile": "exports.handler = (event, context) => {\n  console.log(JSON.stringify(event))\n}\n"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "FunctionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x"
            }
        },
        "FunctionPermissionByHardcodedNameAndAlias": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": "function5:v1",
                "Action": "lambda:InvokeFunction",
                "Principal": "*"
            }
        },
        "Function6Alias": {
            "Type": "AWS::Lambda::Alias",
            "Properties": {
                "FunctionName": {
                    "Ref": "Function5"
                },
                "FunctionVersion": "$LATEST",
                "Name": "v1"
            }
        },
        "Function6": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": {
                    "Fn::Sub": "function-${AWS::Region}"
                },
                "Code": {
                    "ZipFile": "exports.handler = (event, context) => {\n  console.log(JSON.stringify(event))\n}\n"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "FunctionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x"
            }
        },
        "FunctionPermissionByNameAndAliasUsingFunctions": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::Join": [
                        ":",
                        [
                            {
                                "Fn::Sub": "function-${AWS::Region}"
                            },
                            "v2"
                        ]
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "*"
            }
        }
    }
}