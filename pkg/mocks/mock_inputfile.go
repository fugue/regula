// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fugue/regula/v2/pkg/loader (interfaces: InputFile)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	loader "github.com/fugue/regula/v2/pkg/loader"
	gomock "github.com/golang/mock/gomock"
)

// MockInputFile is a mock of InputFile interface.
type MockInputFile struct {
	ctrl     *gomock.Controller
	recorder *MockInputFileMockRecorder
}

// MockInputFileMockRecorder is the mock recorder for MockInputFile.
type MockInputFileMockRecorder struct {
	mock *MockInputFile
}

// NewMockInputFile creates a new mock instance.
func NewMockInputFile(ctrl *gomock.Controller) *MockInputFile {
	mock := &MockInputFile{ctrl: ctrl}
	mock.recorder = &MockInputFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInputFile) EXPECT() *MockInputFileMockRecorder {
	return m.recorder
}

// Contents mocks base method.
func (m *MockInputFile) Contents() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contents")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Contents indicates an expected call of Contents.
func (mr *MockInputFileMockRecorder) Contents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contents", reflect.TypeOf((*MockInputFile)(nil).Contents))
}

// DetectType mocks base method.
func (m *MockInputFile) DetectType(arg0 loader.ConfigurationDetector, arg1 loader.DetectOptions) (loader.IACConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectType", arg0, arg1)
	ret0, _ := ret[0].(loader.IACConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectType indicates an expected call of DetectType.
func (mr *MockInputFileMockRecorder) DetectType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectType", reflect.TypeOf((*MockInputFile)(nil).DetectType), arg0, arg1)
}

// Ext mocks base method.
func (m *MockInputFile) Ext() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ext")
	ret0, _ := ret[0].(string)
	return ret0
}

// Ext indicates an expected call of Ext.
func (mr *MockInputFileMockRecorder) Ext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ext", reflect.TypeOf((*MockInputFile)(nil).Ext))
}

// IsDir mocks base method.
func (m *MockInputFile) IsDir() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDir")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDir indicates an expected call of IsDir.
func (mr *MockInputFileMockRecorder) IsDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDir", reflect.TypeOf((*MockInputFile)(nil).IsDir))
}

// Name mocks base method.
func (m *MockInputFile) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockInputFileMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockInputFile)(nil).Name))
}

// Path mocks base method.
func (m *MockInputFile) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockInputFileMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockInputFile)(nil).Path))
}
