// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fugue/regula/v2/pkg/loader (interfaces: LoadedConfigurations)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	loader "github.com/fugue/regula/v2/pkg/loader"
	gomock "github.com/golang/mock/gomock"
)

// MockLoadedConfigurations is a mock of LoadedConfigurations interface.
type MockLoadedConfigurations struct {
	ctrl     *gomock.Controller
	recorder *MockLoadedConfigurationsMockRecorder
}

// MockLoadedConfigurationsMockRecorder is the mock recorder for MockLoadedConfigurations.
type MockLoadedConfigurationsMockRecorder struct {
	mock *MockLoadedConfigurations
}

// NewMockLoadedConfigurations creates a new mock instance.
func NewMockLoadedConfigurations(ctrl *gomock.Controller) *MockLoadedConfigurations {
	mock := &MockLoadedConfigurations{ctrl: ctrl}
	mock.recorder = &MockLoadedConfigurationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadedConfigurations) EXPECT() *MockLoadedConfigurationsMockRecorder {
	return m.recorder
}

// AddConfiguration mocks base method.
func (m *MockLoadedConfigurations) AddConfiguration(arg0 string, arg1 loader.IACConfiguration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddConfiguration", arg0, arg1)
}

// AddConfiguration indicates an expected call of AddConfiguration.
func (mr *MockLoadedConfigurationsMockRecorder) AddConfiguration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConfiguration", reflect.TypeOf((*MockLoadedConfigurations)(nil).AddConfiguration), arg0, arg1)
}

// AlreadyLoaded mocks base method.
func (m *MockLoadedConfigurations) AlreadyLoaded(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlreadyLoaded", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AlreadyLoaded indicates an expected call of AlreadyLoaded.
func (mr *MockLoadedConfigurationsMockRecorder) AlreadyLoaded(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlreadyLoaded", reflect.TypeOf((*MockLoadedConfigurations)(nil).AlreadyLoaded), arg0)
}

// Count mocks base method.
func (m *MockLoadedConfigurations) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockLoadedConfigurationsMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockLoadedConfigurations)(nil).Count))
}

// Location mocks base method.
func (m *MockLoadedConfigurations) Location(arg0 string, arg1 []string) ([]loader.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Location", arg0, arg1)
	ret0, _ := ret[0].([]loader.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Location indicates an expected call of Location.
func (mr *MockLoadedConfigurationsMockRecorder) Location(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Location", reflect.TypeOf((*MockLoadedConfigurations)(nil).Location), arg0, arg1)
}

// RegulaInput mocks base method.
func (m *MockLoadedConfigurations) RegulaInput() []loader.RegulaInput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegulaInput")
	ret0, _ := ret[0].([]loader.RegulaInput)
	return ret0
}

// RegulaInput indicates an expected call of RegulaInput.
func (mr *MockLoadedConfigurationsMockRecorder) RegulaInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegulaInput", reflect.TypeOf((*MockLoadedConfigurations)(nil).RegulaInput))
}
