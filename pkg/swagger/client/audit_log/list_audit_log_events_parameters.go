// Code generated by go-swagger; DO NOT EDIT.

package audit_log

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListAuditLogEventsParams creates a new ListAuditLogEventsParams object
// with the default values initialized.
func NewListAuditLogEventsParams() *ListAuditLogEventsParams {
	var (
		maxItemsDefault       = int64(100)
		orderDirectionDefault = string("desc")
	)
	return &ListAuditLogEventsParams{
		MaxItems:       &maxItemsDefault,
		OrderDirection: &orderDirectionDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListAuditLogEventsParamsWithTimeout creates a new ListAuditLogEventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListAuditLogEventsParamsWithTimeout(timeout time.Duration) *ListAuditLogEventsParams {
	var (
		maxItemsDefault       = int64(100)
		orderDirectionDefault = string("desc")
	)
	return &ListAuditLogEventsParams{
		MaxItems:       &maxItemsDefault,
		OrderDirection: &orderDirectionDefault,

		timeout: timeout,
	}
}

// NewListAuditLogEventsParamsWithContext creates a new ListAuditLogEventsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListAuditLogEventsParamsWithContext(ctx context.Context) *ListAuditLogEventsParams {
	var (
		maxItemsDefault       = int64(100)
		orderDirectionDefault = string("desc")
	)
	return &ListAuditLogEventsParams{
		MaxItems:       &maxItemsDefault,
		OrderDirection: &orderDirectionDefault,

		Context: ctx,
	}
}

// NewListAuditLogEventsParamsWithHTTPClient creates a new ListAuditLogEventsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListAuditLogEventsParamsWithHTTPClient(client *http.Client) *ListAuditLogEventsParams {
	var (
		maxItemsDefault       = int64(100)
		orderDirectionDefault = string("desc")
	)
	return &ListAuditLogEventsParams{
		MaxItems:       &maxItemsDefault,
		OrderDirection: &orderDirectionDefault,
		HTTPClient:     client,
	}
}

/*ListAuditLogEventsParams contains all the parameters to send to the API endpoint
for the list audit log events operation typically these are written to a http.Request
*/
type ListAuditLogEventsParams struct {

	/*MaxItems
	  Maximum number of items to return.

	*/
	MaxItems *int64
	/*NextToken
	  If set can be used to retrieve the next page of records.

	*/
	NextToken *string
	/*OrderDirection
	  Direction to sort the items in.

	*/
	OrderDirection *string
	/*RangeFrom
	  Earliest timestamp to include in results. format: ISO 8601

	*/
	RangeFrom *strfmt.DateTime
	/*RangeTo
	  Latest timestamp to include in results. format: ISO 8601

	*/
	RangeTo *strfmt.DateTime
	/*SubjectKind
	  The kind or type of entity to filter on.

	*/
	SubjectKind *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list audit log events params
func (o *ListAuditLogEventsParams) WithTimeout(timeout time.Duration) *ListAuditLogEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list audit log events params
func (o *ListAuditLogEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list audit log events params
func (o *ListAuditLogEventsParams) WithContext(ctx context.Context) *ListAuditLogEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list audit log events params
func (o *ListAuditLogEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list audit log events params
func (o *ListAuditLogEventsParams) WithHTTPClient(client *http.Client) *ListAuditLogEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list audit log events params
func (o *ListAuditLogEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMaxItems adds the maxItems to the list audit log events params
func (o *ListAuditLogEventsParams) WithMaxItems(maxItems *int64) *ListAuditLogEventsParams {
	o.SetMaxItems(maxItems)
	return o
}

// SetMaxItems adds the maxItems to the list audit log events params
func (o *ListAuditLogEventsParams) SetMaxItems(maxItems *int64) {
	o.MaxItems = maxItems
}

// WithNextToken adds the nextToken to the list audit log events params
func (o *ListAuditLogEventsParams) WithNextToken(nextToken *string) *ListAuditLogEventsParams {
	o.SetNextToken(nextToken)
	return o
}

// SetNextToken adds the nextToken to the list audit log events params
func (o *ListAuditLogEventsParams) SetNextToken(nextToken *string) {
	o.NextToken = nextToken
}

// WithOrderDirection adds the orderDirection to the list audit log events params
func (o *ListAuditLogEventsParams) WithOrderDirection(orderDirection *string) *ListAuditLogEventsParams {
	o.SetOrderDirection(orderDirection)
	return o
}

// SetOrderDirection adds the orderDirection to the list audit log events params
func (o *ListAuditLogEventsParams) SetOrderDirection(orderDirection *string) {
	o.OrderDirection = orderDirection
}

// WithRangeFrom adds the rangeFrom to the list audit log events params
func (o *ListAuditLogEventsParams) WithRangeFrom(rangeFrom *strfmt.DateTime) *ListAuditLogEventsParams {
	o.SetRangeFrom(rangeFrom)
	return o
}

// SetRangeFrom adds the rangeFrom to the list audit log events params
func (o *ListAuditLogEventsParams) SetRangeFrom(rangeFrom *strfmt.DateTime) {
	o.RangeFrom = rangeFrom
}

// WithRangeTo adds the rangeTo to the list audit log events params
func (o *ListAuditLogEventsParams) WithRangeTo(rangeTo *strfmt.DateTime) *ListAuditLogEventsParams {
	o.SetRangeTo(rangeTo)
	return o
}

// SetRangeTo adds the rangeTo to the list audit log events params
func (o *ListAuditLogEventsParams) SetRangeTo(rangeTo *strfmt.DateTime) {
	o.RangeTo = rangeTo
}

// WithSubjectKind adds the subjectKind to the list audit log events params
func (o *ListAuditLogEventsParams) WithSubjectKind(subjectKind *string) *ListAuditLogEventsParams {
	o.SetSubjectKind(subjectKind)
	return o
}

// SetSubjectKind adds the subjectKind to the list audit log events params
func (o *ListAuditLogEventsParams) SetSubjectKind(subjectKind *string) {
	o.SubjectKind = subjectKind
}

// WriteToRequest writes these params to a swagger request
func (o *ListAuditLogEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.MaxItems != nil {

		// query param max_items
		var qrMaxItems int64
		if o.MaxItems != nil {
			qrMaxItems = *o.MaxItems
		}
		qMaxItems := swag.FormatInt64(qrMaxItems)
		if qMaxItems != "" {
			if err := r.SetQueryParam("max_items", qMaxItems); err != nil {
				return err
			}
		}

	}

	if o.NextToken != nil {

		// query param next_token
		var qrNextToken string
		if o.NextToken != nil {
			qrNextToken = *o.NextToken
		}
		qNextToken := qrNextToken
		if qNextToken != "" {
			if err := r.SetQueryParam("next_token", qNextToken); err != nil {
				return err
			}
		}

	}

	if o.OrderDirection != nil {

		// query param order_direction
		var qrOrderDirection string
		if o.OrderDirection != nil {
			qrOrderDirection = *o.OrderDirection
		}
		qOrderDirection := qrOrderDirection
		if qOrderDirection != "" {
			if err := r.SetQueryParam("order_direction", qOrderDirection); err != nil {
				return err
			}
		}

	}

	if o.RangeFrom != nil {

		// query param range_from
		var qrRangeFrom strfmt.DateTime
		if o.RangeFrom != nil {
			qrRangeFrom = *o.RangeFrom
		}
		qRangeFrom := qrRangeFrom.String()
		if qRangeFrom != "" {
			if err := r.SetQueryParam("range_from", qRangeFrom); err != nil {
				return err
			}
		}

	}

	if o.RangeTo != nil {

		// query param range_to
		var qrRangeTo strfmt.DateTime
		if o.RangeTo != nil {
			qrRangeTo = *o.RangeTo
		}
		qRangeTo := qrRangeTo.String()
		if qRangeTo != "" {
			if err := r.SetQueryParam("range_to", qRangeTo); err != nil {
				return err
			}
		}

	}

	if o.SubjectKind != nil {

		// query param subject_kind
		var qrSubjectKind string
		if o.SubjectKind != nil {
			qrSubjectKind = *o.SubjectKind
		}
		qSubjectKind := qrSubjectKind
		if qSubjectKind != "" {
			if err := r.SetQueryParam("subject_kind", qSubjectKind); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
