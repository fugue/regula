// Code generated by go-swagger; DO NOT EDIT.

package audit_log

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fugue/regula/pkg/swagger/models"
)

// ListAuditLogEventsReader is a Reader for the ListAuditLogEvents structure.
type ListAuditLogEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAuditLogEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListAuditLogEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListAuditLogEventsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListAuditLogEventsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListAuditLogEventsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListAuditLogEventsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListAuditLogEventsOK creates a ListAuditLogEventsOK with default headers values
func NewListAuditLogEventsOK() *ListAuditLogEventsOK {
	return &ListAuditLogEventsOK{}
}

/*ListAuditLogEventsOK handles this case with default header values.

List of audit log events.
*/
type ListAuditLogEventsOK struct {
	Payload *models.AuditLogEvents
}

func (o *ListAuditLogEventsOK) Error() string {
	return fmt.Sprintf("[GET /audit_log/events][%d] listAuditLogEventsOK  %+v", 200, o.Payload)
}

func (o *ListAuditLogEventsOK) GetPayload() *models.AuditLogEvents {
	return o.Payload
}

func (o *ListAuditLogEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuditLogEvents)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAuditLogEventsBadRequest creates a ListAuditLogEventsBadRequest with default headers values
func NewListAuditLogEventsBadRequest() *ListAuditLogEventsBadRequest {
	return &ListAuditLogEventsBadRequest{}
}

/*ListAuditLogEventsBadRequest handles this case with default header values.

Bad request error.
*/
type ListAuditLogEventsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *ListAuditLogEventsBadRequest) Error() string {
	return fmt.Sprintf("[GET /audit_log/events][%d] listAuditLogEventsBadRequest  %+v", 400, o.Payload)
}

func (o *ListAuditLogEventsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *ListAuditLogEventsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAuditLogEventsUnauthorized creates a ListAuditLogEventsUnauthorized with default headers values
func NewListAuditLogEventsUnauthorized() *ListAuditLogEventsUnauthorized {
	return &ListAuditLogEventsUnauthorized{}
}

/*ListAuditLogEventsUnauthorized handles this case with default header values.

Authentication error.
*/
type ListAuditLogEventsUnauthorized struct {
	Payload *models.AuthenticationError
}

func (o *ListAuditLogEventsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /audit_log/events][%d] listAuditLogEventsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListAuditLogEventsUnauthorized) GetPayload() *models.AuthenticationError {
	return o.Payload
}

func (o *ListAuditLogEventsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAuditLogEventsForbidden creates a ListAuditLogEventsForbidden with default headers values
func NewListAuditLogEventsForbidden() *ListAuditLogEventsForbidden {
	return &ListAuditLogEventsForbidden{}
}

/*ListAuditLogEventsForbidden handles this case with default header values.

Authorization error.
*/
type ListAuditLogEventsForbidden struct {
	Payload *models.AuthorizationError
}

func (o *ListAuditLogEventsForbidden) Error() string {
	return fmt.Sprintf("[GET /audit_log/events][%d] listAuditLogEventsForbidden  %+v", 403, o.Payload)
}

func (o *ListAuditLogEventsForbidden) GetPayload() *models.AuthorizationError {
	return o.Payload
}

func (o *ListAuditLogEventsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthorizationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAuditLogEventsInternalServerError creates a ListAuditLogEventsInternalServerError with default headers values
func NewListAuditLogEventsInternalServerError() *ListAuditLogEventsInternalServerError {
	return &ListAuditLogEventsInternalServerError{}
}

/*ListAuditLogEventsInternalServerError handles this case with default header values.

Internal server error.
*/
type ListAuditLogEventsInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *ListAuditLogEventsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /audit_log/events][%d] listAuditLogEventsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListAuditLogEventsInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *ListAuditLogEventsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
