// Code generated by go-swagger; DO NOT EDIT.

package custom_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/fugue/regula/pkg/swagger/models"
)

// NewTestCustomRuleParams creates a new TestCustomRuleParams object
// with the default values initialized.
func NewTestCustomRuleParams() *TestCustomRuleParams {
	var ()
	return &TestCustomRuleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTestCustomRuleParamsWithTimeout creates a new TestCustomRuleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTestCustomRuleParamsWithTimeout(timeout time.Duration) *TestCustomRuleParams {
	var ()
	return &TestCustomRuleParams{

		timeout: timeout,
	}
}

// NewTestCustomRuleParamsWithContext creates a new TestCustomRuleParams object
// with the default values initialized, and the ability to set a context for a request
func NewTestCustomRuleParamsWithContext(ctx context.Context) *TestCustomRuleParams {
	var ()
	return &TestCustomRuleParams{

		Context: ctx,
	}
}

// NewTestCustomRuleParamsWithHTTPClient creates a new TestCustomRuleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTestCustomRuleParamsWithHTTPClient(client *http.Client) *TestCustomRuleParams {
	var ()
	return &TestCustomRuleParams{
		HTTPClient: client,
	}
}

/*TestCustomRuleParams contains all the parameters to send to the API endpoint
for the test custom rule operation typically these are written to a http.Request
*/
type TestCustomRuleParams struct {

	/*Rule
	  Information about custom rule to be tested.

	*/
	Rule *models.TestCustomRuleInput
	/*ViaDownload
	  Force output to be downloadable.

	*/
	ViaDownload *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the test custom rule params
func (o *TestCustomRuleParams) WithTimeout(timeout time.Duration) *TestCustomRuleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the test custom rule params
func (o *TestCustomRuleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the test custom rule params
func (o *TestCustomRuleParams) WithContext(ctx context.Context) *TestCustomRuleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the test custom rule params
func (o *TestCustomRuleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the test custom rule params
func (o *TestCustomRuleParams) WithHTTPClient(client *http.Client) *TestCustomRuleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the test custom rule params
func (o *TestCustomRuleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRule adds the rule to the test custom rule params
func (o *TestCustomRuleParams) WithRule(rule *models.TestCustomRuleInput) *TestCustomRuleParams {
	o.SetRule(rule)
	return o
}

// SetRule adds the rule to the test custom rule params
func (o *TestCustomRuleParams) SetRule(rule *models.TestCustomRuleInput) {
	o.Rule = rule
}

// WithViaDownload adds the viaDownload to the test custom rule params
func (o *TestCustomRuleParams) WithViaDownload(viaDownload *bool) *TestCustomRuleParams {
	o.SetViaDownload(viaDownload)
	return o
}

// SetViaDownload adds the viaDownload to the test custom rule params
func (o *TestCustomRuleParams) SetViaDownload(viaDownload *bool) {
	o.ViaDownload = viaDownload
}

// WriteToRequest writes these params to a swagger request
func (o *TestCustomRuleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Rule != nil {
		if err := r.SetBodyParam(o.Rule); err != nil {
			return err
		}
	}

	if o.ViaDownload != nil {

		// query param via_download
		var qrViaDownload bool
		if o.ViaDownload != nil {
			qrViaDownload = *o.ViaDownload
		}
		qViaDownload := swag.FormatBool(qrViaDownload)
		if qViaDownload != "" {
			if err := r.SetQueryParam("via_download", qViaDownload); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
