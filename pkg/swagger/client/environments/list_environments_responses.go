// Code generated by go-swagger; DO NOT EDIT.

package environments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fugue/regula/pkg/swagger/models"
)

// ListEnvironmentsReader is a Reader for the ListEnvironments structure.
type ListEnvironmentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListEnvironmentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListEnvironmentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListEnvironmentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListEnvironmentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListEnvironmentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListEnvironmentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListEnvironmentsOK creates a ListEnvironmentsOK with default headers values
func NewListEnvironmentsOK() *ListEnvironmentsOK {
	return &ListEnvironmentsOK{}
}

/*ListEnvironmentsOK handles this case with default header values.

List of environments and details.
*/
type ListEnvironmentsOK struct {
	Payload *models.Environments
}

func (o *ListEnvironmentsOK) Error() string {
	return fmt.Sprintf("[GET /environments][%d] listEnvironmentsOK  %+v", 200, o.Payload)
}

func (o *ListEnvironmentsOK) GetPayload() *models.Environments {
	return o.Payload
}

func (o *ListEnvironmentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Environments)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEnvironmentsBadRequest creates a ListEnvironmentsBadRequest with default headers values
func NewListEnvironmentsBadRequest() *ListEnvironmentsBadRequest {
	return &ListEnvironmentsBadRequest{}
}

/*ListEnvironmentsBadRequest handles this case with default header values.

BadRequestError
*/
type ListEnvironmentsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *ListEnvironmentsBadRequest) Error() string {
	return fmt.Sprintf("[GET /environments][%d] listEnvironmentsBadRequest  %+v", 400, o.Payload)
}

func (o *ListEnvironmentsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *ListEnvironmentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEnvironmentsUnauthorized creates a ListEnvironmentsUnauthorized with default headers values
func NewListEnvironmentsUnauthorized() *ListEnvironmentsUnauthorized {
	return &ListEnvironmentsUnauthorized{}
}

/*ListEnvironmentsUnauthorized handles this case with default header values.

AuthenticationError
*/
type ListEnvironmentsUnauthorized struct {
	Payload *models.AuthenticationError
}

func (o *ListEnvironmentsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /environments][%d] listEnvironmentsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListEnvironmentsUnauthorized) GetPayload() *models.AuthenticationError {
	return o.Payload
}

func (o *ListEnvironmentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEnvironmentsForbidden creates a ListEnvironmentsForbidden with default headers values
func NewListEnvironmentsForbidden() *ListEnvironmentsForbidden {
	return &ListEnvironmentsForbidden{}
}

/*ListEnvironmentsForbidden handles this case with default header values.

AuthorizationError
*/
type ListEnvironmentsForbidden struct {
	Payload *models.AuthorizationError
}

func (o *ListEnvironmentsForbidden) Error() string {
	return fmt.Sprintf("[GET /environments][%d] listEnvironmentsForbidden  %+v", 403, o.Payload)
}

func (o *ListEnvironmentsForbidden) GetPayload() *models.AuthorizationError {
	return o.Payload
}

func (o *ListEnvironmentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthorizationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEnvironmentsInternalServerError creates a ListEnvironmentsInternalServerError with default headers values
func NewListEnvironmentsInternalServerError() *ListEnvironmentsInternalServerError {
	return &ListEnvironmentsInternalServerError{}
}

/*ListEnvironmentsInternalServerError handles this case with default header values.

InternalServerError
*/
type ListEnvironmentsInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *ListEnvironmentsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /environments][%d] listEnvironmentsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListEnvironmentsInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *ListEnvironmentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
