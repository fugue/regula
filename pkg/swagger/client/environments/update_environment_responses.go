// Code generated by go-swagger; DO NOT EDIT.

package environments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fugue/regula/pkg/swagger/models"
)

// UpdateEnvironmentReader is a Reader for the UpdateEnvironment structure.
type UpdateEnvironmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateEnvironmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateEnvironmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateEnvironmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateEnvironmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateEnvironmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateEnvironmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateEnvironmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateEnvironmentOK creates a UpdateEnvironmentOK with default headers values
func NewUpdateEnvironmentOK() *UpdateEnvironmentOK {
	return &UpdateEnvironmentOK{}
}

/*UpdateEnvironmentOK handles this case with default header values.

Updated environment details.
*/
type UpdateEnvironmentOK struct {
	Payload *models.Environment
}

func (o *UpdateEnvironmentOK) Error() string {
	return fmt.Sprintf("[PATCH /environments/{environment_id}][%d] updateEnvironmentOK  %+v", 200, o.Payload)
}

func (o *UpdateEnvironmentOK) GetPayload() *models.Environment {
	return o.Payload
}

func (o *UpdateEnvironmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Environment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEnvironmentBadRequest creates a UpdateEnvironmentBadRequest with default headers values
func NewUpdateEnvironmentBadRequest() *UpdateEnvironmentBadRequest {
	return &UpdateEnvironmentBadRequest{}
}

/*UpdateEnvironmentBadRequest handles this case with default header values.

BadRequestError
*/
type UpdateEnvironmentBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdateEnvironmentBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /environments/{environment_id}][%d] updateEnvironmentBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateEnvironmentBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateEnvironmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEnvironmentUnauthorized creates a UpdateEnvironmentUnauthorized with default headers values
func NewUpdateEnvironmentUnauthorized() *UpdateEnvironmentUnauthorized {
	return &UpdateEnvironmentUnauthorized{}
}

/*UpdateEnvironmentUnauthorized handles this case with default header values.

AuthenticationError
*/
type UpdateEnvironmentUnauthorized struct {
	Payload *models.AuthenticationError
}

func (o *UpdateEnvironmentUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /environments/{environment_id}][%d] updateEnvironmentUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateEnvironmentUnauthorized) GetPayload() *models.AuthenticationError {
	return o.Payload
}

func (o *UpdateEnvironmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEnvironmentForbidden creates a UpdateEnvironmentForbidden with default headers values
func NewUpdateEnvironmentForbidden() *UpdateEnvironmentForbidden {
	return &UpdateEnvironmentForbidden{}
}

/*UpdateEnvironmentForbidden handles this case with default header values.

AuthorizationError
*/
type UpdateEnvironmentForbidden struct {
	Payload *models.AuthorizationError
}

func (o *UpdateEnvironmentForbidden) Error() string {
	return fmt.Sprintf("[PATCH /environments/{environment_id}][%d] updateEnvironmentForbidden  %+v", 403, o.Payload)
}

func (o *UpdateEnvironmentForbidden) GetPayload() *models.AuthorizationError {
	return o.Payload
}

func (o *UpdateEnvironmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthorizationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEnvironmentNotFound creates a UpdateEnvironmentNotFound with default headers values
func NewUpdateEnvironmentNotFound() *UpdateEnvironmentNotFound {
	return &UpdateEnvironmentNotFound{}
}

/*UpdateEnvironmentNotFound handles this case with default header values.

NotFoundError
*/
type UpdateEnvironmentNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateEnvironmentNotFound) Error() string {
	return fmt.Sprintf("[PATCH /environments/{environment_id}][%d] updateEnvironmentNotFound  %+v", 404, o.Payload)
}

func (o *UpdateEnvironmentNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateEnvironmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEnvironmentInternalServerError creates a UpdateEnvironmentInternalServerError with default headers values
func NewUpdateEnvironmentInternalServerError() *UpdateEnvironmentInternalServerError {
	return &UpdateEnvironmentInternalServerError{}
}

/*UpdateEnvironmentInternalServerError handles this case with default header values.

InternalServerError
*/
type UpdateEnvironmentInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *UpdateEnvironmentInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /environments/{environment_id}][%d] updateEnvironmentInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateEnvironmentInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *UpdateEnvironmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
