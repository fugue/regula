// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fugue/regula/pkg/swagger/models"
)

// ListEventsReader is a Reader for the ListEvents structure.
type ListEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListEventsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListEventsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListEventsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListEventsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListEventsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListEventsOK creates a ListEventsOK with default headers values
func NewListEventsOK() *ListEventsOK {
	return &ListEventsOK{}
}

/*ListEventsOK handles this case with default header values.

List of drift, remediation, and compliance events.
*/
type ListEventsOK struct {
	Payload *models.Events
}

func (o *ListEventsOK) Error() string {
	return fmt.Sprintf("[GET /events][%d] listEventsOK  %+v", 200, o.Payload)
}

func (o *ListEventsOK) GetPayload() *models.Events {
	return o.Payload
}

func (o *ListEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Events)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEventsBadRequest creates a ListEventsBadRequest with default headers values
func NewListEventsBadRequest() *ListEventsBadRequest {
	return &ListEventsBadRequest{}
}

/*ListEventsBadRequest handles this case with default header values.

BadRequestError
*/
type ListEventsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *ListEventsBadRequest) Error() string {
	return fmt.Sprintf("[GET /events][%d] listEventsBadRequest  %+v", 400, o.Payload)
}

func (o *ListEventsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *ListEventsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEventsUnauthorized creates a ListEventsUnauthorized with default headers values
func NewListEventsUnauthorized() *ListEventsUnauthorized {
	return &ListEventsUnauthorized{}
}

/*ListEventsUnauthorized handles this case with default header values.

AuthenticationError
*/
type ListEventsUnauthorized struct {
	Payload *models.AuthenticationError
}

func (o *ListEventsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /events][%d] listEventsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListEventsUnauthorized) GetPayload() *models.AuthenticationError {
	return o.Payload
}

func (o *ListEventsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEventsForbidden creates a ListEventsForbidden with default headers values
func NewListEventsForbidden() *ListEventsForbidden {
	return &ListEventsForbidden{}
}

/*ListEventsForbidden handles this case with default header values.

AuthorizationError
*/
type ListEventsForbidden struct {
	Payload *models.AuthorizationError
}

func (o *ListEventsForbidden) Error() string {
	return fmt.Sprintf("[GET /events][%d] listEventsForbidden  %+v", 403, o.Payload)
}

func (o *ListEventsForbidden) GetPayload() *models.AuthorizationError {
	return o.Payload
}

func (o *ListEventsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthorizationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEventsNotFound creates a ListEventsNotFound with default headers values
func NewListEventsNotFound() *ListEventsNotFound {
	return &ListEventsNotFound{}
}

/*ListEventsNotFound handles this case with default header values.

NotFoundError
*/
type ListEventsNotFound struct {
	Payload *models.NotFoundError
}

func (o *ListEventsNotFound) Error() string {
	return fmt.Sprintf("[GET /events][%d] listEventsNotFound  %+v", 404, o.Payload)
}

func (o *ListEventsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *ListEventsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListEventsInternalServerError creates a ListEventsInternalServerError with default headers values
func NewListEventsInternalServerError() *ListEventsInternalServerError {
	return &ListEventsInternalServerError{}
}

/*ListEventsInternalServerError handles this case with default header values.

InternalServerError
*/
type ListEventsInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *ListEventsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /events][%d] listEventsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListEventsInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *ListEventsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
