// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fugue/regula/pkg/swagger/models"
)

// ListNotificationsReader is a Reader for the ListNotifications structure.
type ListNotificationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListNotificationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListNotificationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListNotificationsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListNotificationsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListNotificationsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListNotificationsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListNotificationsOK creates a ListNotificationsOK with default headers values
func NewListNotificationsOK() *ListNotificationsOK {
	return &ListNotificationsOK{}
}

/*ListNotificationsOK handles this case with default header values.

List of notification details.
*/
type ListNotificationsOK struct {
	Payload *models.Notifications
}

func (o *ListNotificationsOK) Error() string {
	return fmt.Sprintf("[GET /notifications][%d] listNotificationsOK  %+v", 200, o.Payload)
}

func (o *ListNotificationsOK) GetPayload() *models.Notifications {
	return o.Payload
}

func (o *ListNotificationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Notifications)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNotificationsBadRequest creates a ListNotificationsBadRequest with default headers values
func NewListNotificationsBadRequest() *ListNotificationsBadRequest {
	return &ListNotificationsBadRequest{}
}

/*ListNotificationsBadRequest handles this case with default header values.

BadRequestError
*/
type ListNotificationsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *ListNotificationsBadRequest) Error() string {
	return fmt.Sprintf("[GET /notifications][%d] listNotificationsBadRequest  %+v", 400, o.Payload)
}

func (o *ListNotificationsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *ListNotificationsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNotificationsUnauthorized creates a ListNotificationsUnauthorized with default headers values
func NewListNotificationsUnauthorized() *ListNotificationsUnauthorized {
	return &ListNotificationsUnauthorized{}
}

/*ListNotificationsUnauthorized handles this case with default header values.

AuthenticationError
*/
type ListNotificationsUnauthorized struct {
	Payload *models.AuthenticationError
}

func (o *ListNotificationsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /notifications][%d] listNotificationsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListNotificationsUnauthorized) GetPayload() *models.AuthenticationError {
	return o.Payload
}

func (o *ListNotificationsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNotificationsForbidden creates a ListNotificationsForbidden with default headers values
func NewListNotificationsForbidden() *ListNotificationsForbidden {
	return &ListNotificationsForbidden{}
}

/*ListNotificationsForbidden handles this case with default header values.

AuthorizationError
*/
type ListNotificationsForbidden struct {
	Payload *models.AuthorizationError
}

func (o *ListNotificationsForbidden) Error() string {
	return fmt.Sprintf("[GET /notifications][%d] listNotificationsForbidden  %+v", 403, o.Payload)
}

func (o *ListNotificationsForbidden) GetPayload() *models.AuthorizationError {
	return o.Payload
}

func (o *ListNotificationsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthorizationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNotificationsInternalServerError creates a ListNotificationsInternalServerError with default headers values
func NewListNotificationsInternalServerError() *ListNotificationsInternalServerError {
	return &ListNotificationsInternalServerError{}
}

/*ListNotificationsInternalServerError handles this case with default header values.

InternalServerError
*/
type ListNotificationsInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *ListNotificationsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /notifications][%d] listNotificationsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListNotificationsInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *ListNotificationsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
