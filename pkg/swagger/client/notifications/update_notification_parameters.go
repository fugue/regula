// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/fugue/regula/pkg/swagger/models"
)

// NewUpdateNotificationParams creates a new UpdateNotificationParams object
// with the default values initialized.
func NewUpdateNotificationParams() *UpdateNotificationParams {
	var ()
	return &UpdateNotificationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateNotificationParamsWithTimeout creates a new UpdateNotificationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateNotificationParamsWithTimeout(timeout time.Duration) *UpdateNotificationParams {
	var ()
	return &UpdateNotificationParams{

		timeout: timeout,
	}
}

// NewUpdateNotificationParamsWithContext creates a new UpdateNotificationParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateNotificationParamsWithContext(ctx context.Context) *UpdateNotificationParams {
	var ()
	return &UpdateNotificationParams{

		Context: ctx,
	}
}

// NewUpdateNotificationParamsWithHTTPClient creates a new UpdateNotificationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateNotificationParamsWithHTTPClient(client *http.Client) *UpdateNotificationParams {
	var ()
	return &UpdateNotificationParams{
		HTTPClient: client,
	}
}

/*UpdateNotificationParams contains all the parameters to send to the API endpoint
for the update notification operation typically these are written to a http.Request
*/
type UpdateNotificationParams struct {

	/*Notification
	  New configuration options for the notification.

	*/
	Notification *models.UpdateNotificationInput
	/*NotificationID
	  Notification ID.

	*/
	NotificationID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update notification params
func (o *UpdateNotificationParams) WithTimeout(timeout time.Duration) *UpdateNotificationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update notification params
func (o *UpdateNotificationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update notification params
func (o *UpdateNotificationParams) WithContext(ctx context.Context) *UpdateNotificationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update notification params
func (o *UpdateNotificationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update notification params
func (o *UpdateNotificationParams) WithHTTPClient(client *http.Client) *UpdateNotificationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update notification params
func (o *UpdateNotificationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNotification adds the notification to the update notification params
func (o *UpdateNotificationParams) WithNotification(notification *models.UpdateNotificationInput) *UpdateNotificationParams {
	o.SetNotification(notification)
	return o
}

// SetNotification adds the notification to the update notification params
func (o *UpdateNotificationParams) SetNotification(notification *models.UpdateNotificationInput) {
	o.Notification = notification
}

// WithNotificationID adds the notificationID to the update notification params
func (o *UpdateNotificationParams) WithNotificationID(notificationID string) *UpdateNotificationParams {
	o.SetNotificationID(notificationID)
	return o
}

// SetNotificationID adds the notificationId to the update notification params
func (o *UpdateNotificationParams) SetNotificationID(notificationID string) {
	o.NotificationID = notificationID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateNotificationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Notification != nil {
		if err := r.SetBodyParam(o.Notification); err != nil {
			return err
		}
	}

	// path param notification_id
	if err := r.SetPathParam("notification_id", o.NotificationID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
