// Code generated by go-swagger; DO NOT EDIT.

package rule_waivers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new rule waivers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for rule waivers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRuleWaiver(params *CreateRuleWaiverParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRuleWaiverCreated, error)

	DeleteRuleWaiver(params *DeleteRuleWaiverParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRuleWaiverNoContent, error)

	GetRuleWaiver(params *GetRuleWaiverParams, authInfo runtime.ClientAuthInfoWriter) (*GetRuleWaiverOK, error)

	ListRuleWaivers(params *ListRuleWaiversParams, authInfo runtime.ClientAuthInfoWriter) (*ListRuleWaiversOK, error)

	UpdateRuleWaiver(params *UpdateRuleWaiverParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRuleWaiverOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRuleWaiver creates a new rule waiver

  Creates a new rule waiver.
*/
func (a *Client) CreateRuleWaiver(params *CreateRuleWaiverParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRuleWaiverCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRuleWaiverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRuleWaiver",
		Method:             "POST",
		PathPattern:        "/rule_waivers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRuleWaiverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRuleWaiverCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRuleWaiver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRuleWaiver deletes a rule waiver

  Deletes a rule waiver.
*/
func (a *Client) DeleteRuleWaiver(params *DeleteRuleWaiverParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRuleWaiverNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRuleWaiverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRuleWaiver",
		Method:             "DELETE",
		PathPattern:        "/rule_waivers/{rule_waiver_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRuleWaiverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRuleWaiverNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRuleWaiver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRuleWaiver retrieves details and rule metadata for a rule waiver

  Retrieves details and rule metadata for a rule waiver.
*/
func (a *Client) GetRuleWaiver(params *GetRuleWaiverParams, authInfo runtime.ClientAuthInfoWriter) (*GetRuleWaiverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRuleWaiverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRuleWaiver",
		Method:             "GET",
		PathPattern:        "/rule_waivers/{rule_waiver_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRuleWaiverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRuleWaiverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRuleWaiver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRuleWaivers lists details for all rule waivers

  Lists details for all rule waivers.
*/
func (a *Client) ListRuleWaivers(params *ListRuleWaiversParams, authInfo runtime.ClientAuthInfoWriter) (*ListRuleWaiversOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRuleWaiversParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRuleWaivers",
		Method:             "GET",
		PathPattern:        "/rule_waivers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRuleWaiversReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRuleWaiversOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRuleWaivers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRuleWaiver updates a rule waiver

  Updates a rule waiver.
*/
func (a *Client) UpdateRuleWaiver(params *UpdateRuleWaiverParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRuleWaiverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRuleWaiverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRuleWaiver",
		Method:             "PATCH",
		PathPattern:        "/rule_waivers/{rule_waiver_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRuleWaiverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRuleWaiverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRuleWaiver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
