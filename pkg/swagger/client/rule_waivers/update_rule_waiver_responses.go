// Code generated by go-swagger; DO NOT EDIT.

package rule_waivers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fugue/regula/pkg/swagger/models"
)

// UpdateRuleWaiverReader is a Reader for the UpdateRuleWaiver structure.
type UpdateRuleWaiverReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRuleWaiverReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRuleWaiverOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateRuleWaiverUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRuleWaiverForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRuleWaiverNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateRuleWaiverInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateRuleWaiverOK creates a UpdateRuleWaiverOK with default headers values
func NewUpdateRuleWaiverOK() *UpdateRuleWaiverOK {
	return &UpdateRuleWaiverOK{}
}

/*UpdateRuleWaiverOK handles this case with default header values.

Rule waiver details
*/
type UpdateRuleWaiverOK struct {
	Payload *models.RuleWaiver
}

func (o *UpdateRuleWaiverOK) Error() string {
	return fmt.Sprintf("[PATCH /rule_waivers/{rule_waiver_id}][%d] updateRuleWaiverOK  %+v", 200, o.Payload)
}

func (o *UpdateRuleWaiverOK) GetPayload() *models.RuleWaiver {
	return o.Payload
}

func (o *UpdateRuleWaiverOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuleWaiver)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRuleWaiverUnauthorized creates a UpdateRuleWaiverUnauthorized with default headers values
func NewUpdateRuleWaiverUnauthorized() *UpdateRuleWaiverUnauthorized {
	return &UpdateRuleWaiverUnauthorized{}
}

/*UpdateRuleWaiverUnauthorized handles this case with default header values.

AuthenticationError
*/
type UpdateRuleWaiverUnauthorized struct {
	Payload *models.AuthenticationError
}

func (o *UpdateRuleWaiverUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /rule_waivers/{rule_waiver_id}][%d] updateRuleWaiverUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateRuleWaiverUnauthorized) GetPayload() *models.AuthenticationError {
	return o.Payload
}

func (o *UpdateRuleWaiverUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRuleWaiverForbidden creates a UpdateRuleWaiverForbidden with default headers values
func NewUpdateRuleWaiverForbidden() *UpdateRuleWaiverForbidden {
	return &UpdateRuleWaiverForbidden{}
}

/*UpdateRuleWaiverForbidden handles this case with default header values.

AuthorizationError
*/
type UpdateRuleWaiverForbidden struct {
	Payload *models.AuthorizationError
}

func (o *UpdateRuleWaiverForbidden) Error() string {
	return fmt.Sprintf("[PATCH /rule_waivers/{rule_waiver_id}][%d] updateRuleWaiverForbidden  %+v", 403, o.Payload)
}

func (o *UpdateRuleWaiverForbidden) GetPayload() *models.AuthorizationError {
	return o.Payload
}

func (o *UpdateRuleWaiverForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthorizationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRuleWaiverNotFound creates a UpdateRuleWaiverNotFound with default headers values
func NewUpdateRuleWaiverNotFound() *UpdateRuleWaiverNotFound {
	return &UpdateRuleWaiverNotFound{}
}

/*UpdateRuleWaiverNotFound handles this case with default header values.

NotFoundError
*/
type UpdateRuleWaiverNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateRuleWaiverNotFound) Error() string {
	return fmt.Sprintf("[PATCH /rule_waivers/{rule_waiver_id}][%d] updateRuleWaiverNotFound  %+v", 404, o.Payload)
}

func (o *UpdateRuleWaiverNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateRuleWaiverNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRuleWaiverInternalServerError creates a UpdateRuleWaiverInternalServerError with default headers values
func NewUpdateRuleWaiverInternalServerError() *UpdateRuleWaiverInternalServerError {
	return &UpdateRuleWaiverInternalServerError{}
}

/*UpdateRuleWaiverInternalServerError handles this case with default header values.

InternalServerError
*/
type UpdateRuleWaiverInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *UpdateRuleWaiverInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /rule_waivers/{rule_waiver_id}][%d] updateRuleWaiverInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRuleWaiverInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *UpdateRuleWaiverInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
