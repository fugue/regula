// Code generated by go-swagger; DO NOT EDIT.

package scans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetComplianceByResourceTypesParams creates a new GetComplianceByResourceTypesParams object
// with the default values initialized.
func NewGetComplianceByResourceTypesParams() *GetComplianceByResourceTypesParams {
	var (
		maxItemsDefault = int64(100)
		offsetDefault   = int64(0)
	)
	return &GetComplianceByResourceTypesParams{
		MaxItems: &maxItemsDefault,
		Offset:   &offsetDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetComplianceByResourceTypesParamsWithTimeout creates a new GetComplianceByResourceTypesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetComplianceByResourceTypesParamsWithTimeout(timeout time.Duration) *GetComplianceByResourceTypesParams {
	var (
		maxItemsDefault = int64(100)
		offsetDefault   = int64(0)
	)
	return &GetComplianceByResourceTypesParams{
		MaxItems: &maxItemsDefault,
		Offset:   &offsetDefault,

		timeout: timeout,
	}
}

// NewGetComplianceByResourceTypesParamsWithContext creates a new GetComplianceByResourceTypesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetComplianceByResourceTypesParamsWithContext(ctx context.Context) *GetComplianceByResourceTypesParams {
	var (
		maxItemsDefault = int64(100)
		offsetDefault   = int64(0)
	)
	return &GetComplianceByResourceTypesParams{
		MaxItems: &maxItemsDefault,
		Offset:   &offsetDefault,

		Context: ctx,
	}
}

// NewGetComplianceByResourceTypesParamsWithHTTPClient creates a new GetComplianceByResourceTypesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetComplianceByResourceTypesParamsWithHTTPClient(client *http.Client) *GetComplianceByResourceTypesParams {
	var (
		maxItemsDefault = int64(100)
		offsetDefault   = int64(0)
	)
	return &GetComplianceByResourceTypesParams{
		MaxItems:   &maxItemsDefault,
		Offset:     &offsetDefault,
		HTTPClient: client,
	}
}

/*GetComplianceByResourceTypesParams contains all the parameters to send to the API endpoint
for the get compliance by resource types operation typically these are written to a http.Request
*/
type GetComplianceByResourceTypesParams struct {

	/*Family
	  Compliance family to filter by. When not specified, all compliance families will be returned.

	*/
	Family []string
	/*MaxItems
	  Maximum number of items to return.

	*/
	MaxItems *int64
	/*Offset
	  Number of items to skip before returning. This parameter is used when the number of items spans multiple pages.

	*/
	Offset *int64
	/*ResourceType
	  Resource types to filter by. When not specified, all resource types will be returned.

	*/
	ResourceType []string
	/*ScanID
	  Scan ID.

	*/
	ScanID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get compliance by resource types params
func (o *GetComplianceByResourceTypesParams) WithTimeout(timeout time.Duration) *GetComplianceByResourceTypesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get compliance by resource types params
func (o *GetComplianceByResourceTypesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get compliance by resource types params
func (o *GetComplianceByResourceTypesParams) WithContext(ctx context.Context) *GetComplianceByResourceTypesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get compliance by resource types params
func (o *GetComplianceByResourceTypesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get compliance by resource types params
func (o *GetComplianceByResourceTypesParams) WithHTTPClient(client *http.Client) *GetComplianceByResourceTypesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get compliance by resource types params
func (o *GetComplianceByResourceTypesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFamily adds the family to the get compliance by resource types params
func (o *GetComplianceByResourceTypesParams) WithFamily(family []string) *GetComplianceByResourceTypesParams {
	o.SetFamily(family)
	return o
}

// SetFamily adds the family to the get compliance by resource types params
func (o *GetComplianceByResourceTypesParams) SetFamily(family []string) {
	o.Family = family
}

// WithMaxItems adds the maxItems to the get compliance by resource types params
func (o *GetComplianceByResourceTypesParams) WithMaxItems(maxItems *int64) *GetComplianceByResourceTypesParams {
	o.SetMaxItems(maxItems)
	return o
}

// SetMaxItems adds the maxItems to the get compliance by resource types params
func (o *GetComplianceByResourceTypesParams) SetMaxItems(maxItems *int64) {
	o.MaxItems = maxItems
}

// WithOffset adds the offset to the get compliance by resource types params
func (o *GetComplianceByResourceTypesParams) WithOffset(offset *int64) *GetComplianceByResourceTypesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get compliance by resource types params
func (o *GetComplianceByResourceTypesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithResourceType adds the resourceType to the get compliance by resource types params
func (o *GetComplianceByResourceTypesParams) WithResourceType(resourceType []string) *GetComplianceByResourceTypesParams {
	o.SetResourceType(resourceType)
	return o
}

// SetResourceType adds the resourceType to the get compliance by resource types params
func (o *GetComplianceByResourceTypesParams) SetResourceType(resourceType []string) {
	o.ResourceType = resourceType
}

// WithScanID adds the scanID to the get compliance by resource types params
func (o *GetComplianceByResourceTypesParams) WithScanID(scanID string) *GetComplianceByResourceTypesParams {
	o.SetScanID(scanID)
	return o
}

// SetScanID adds the scanId to the get compliance by resource types params
func (o *GetComplianceByResourceTypesParams) SetScanID(scanID string) {
	o.ScanID = scanID
}

// WriteToRequest writes these params to a swagger request
func (o *GetComplianceByResourceTypesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesFamily := o.Family

	joinedFamily := swag.JoinByFormat(valuesFamily, "multi")
	// query array param family
	if err := r.SetQueryParam("family", joinedFamily...); err != nil {
		return err
	}

	if o.MaxItems != nil {

		// query param max_items
		var qrMaxItems int64
		if o.MaxItems != nil {
			qrMaxItems = *o.MaxItems
		}
		qMaxItems := swag.FormatInt64(qrMaxItems)
		if qMaxItems != "" {
			if err := r.SetQueryParam("max_items", qMaxItems); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	valuesResourceType := o.ResourceType

	joinedResourceType := swag.JoinByFormat(valuesResourceType, "multi")
	// query array param resource_type
	if err := r.SetQueryParam("resource_type", joinedResourceType...); err != nil {
		return err
	}

	// path param scan_id
	if err := r.SetPathParam("scan_id", o.ScanID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
