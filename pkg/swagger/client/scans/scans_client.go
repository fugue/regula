// Code generated by go-swagger; DO NOT EDIT.

package scans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new scans API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scans API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateScan(params *CreateScanParams, authInfo runtime.ClientAuthInfoWriter) (*CreateScanCreated, error)

	GetComplianceByResourceTypes(params *GetComplianceByResourceTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetComplianceByResourceTypesOK, error)

	GetComplianceByRules(params *GetComplianceByRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetComplianceByRulesOK, error)

	GetScan(params *GetScanParams, authInfo runtime.ClientAuthInfoWriter) (*GetScanOK, error)

	ListScans(params *ListScansParams, authInfo runtime.ClientAuthInfoWriter) (*ListScansOK, error)

	UploadRegulaScanView(params *UploadRegulaScanViewParams, authInfo runtime.ClientAuthInfoWriter) (*UploadRegulaScanViewOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateScan creates and triggers a new environment scan

  Creates and triggers a new environment scan.
*/
func (a *Client) CreateScan(params *CreateScanParams, authInfo runtime.ClientAuthInfoWriter) (*CreateScanCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createScan",
		Method:             "POST",
		PathPattern:        "/scans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateScanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateScanCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createScan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetComplianceByResourceTypes lists compliance results by resource type for a scan

  Lists compliance results by resource type for a scan.
*/
func (a *Client) GetComplianceByResourceTypes(params *GetComplianceByResourceTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetComplianceByResourceTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceByResourceTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getComplianceByResourceTypes",
		Method:             "GET",
		PathPattern:        "/scans/{scan_id}/compliance_by_resource_types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceByResourceTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceByResourceTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getComplianceByResourceTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetComplianceByRules lists compliance results by rule for a scan

  Lists compliance results by rule for a scan.
*/
func (a *Client) GetComplianceByRules(params *GetComplianceByRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetComplianceByRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceByRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getComplianceByRules",
		Method:             "GET",
		PathPattern:        "/scans/{scan_id}/compliance_by_rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceByRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceByRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getComplianceByRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScan retrieves details for a scan

  Retrieves details for a scan.
*/
func (a *Client) GetScan(params *GetScanParams, authInfo runtime.ClientAuthInfoWriter) (*GetScanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScan",
		Method:             "GET",
		PathPattern:        "/scans/{scan_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getScan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListScans lists scans for an environment

  Lists scans for an environment.
*/
func (a *Client) ListScans(params *ListScansParams, authInfo runtime.ClientAuthInfoWriter) (*ListScansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListScansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listScans",
		Method:             "GET",
		PathPattern:        "/scans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListScansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListScansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listScans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UploadRegulaScanView uploads a regula produced scan view for an environment and scan

  Uploads a regula-produced scan view for an environment and scan.
*/
func (a *Client) UploadRegulaScanView(params *UploadRegulaScanViewParams, authInfo runtime.ClientAuthInfoWriter) (*UploadRegulaScanViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadRegulaScanViewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadRegulaScanView",
		Method:             "POST",
		PathPattern:        "/scans/{scan_id}/upload_regula_scan_view",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadRegulaScanViewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadRegulaScanViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadRegulaScanView: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
