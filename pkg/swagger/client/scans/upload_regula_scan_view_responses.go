// Code generated by go-swagger; DO NOT EDIT.

package scans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fugue/regula/pkg/swagger/models"
)

// UploadRegulaScanViewReader is a Reader for the UploadRegulaScanView structure.
type UploadRegulaScanViewReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadRegulaScanViewReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadRegulaScanViewOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadRegulaScanViewBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUploadRegulaScanViewUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUploadRegulaScanViewForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUploadRegulaScanViewNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUploadRegulaScanViewInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUploadRegulaScanViewOK creates a UploadRegulaScanViewOK with default headers values
func NewUploadRegulaScanViewOK() *UploadRegulaScanViewOK {
	return &UploadRegulaScanViewOK{}
}

/*UploadRegulaScanViewOK handles this case with default header values.

A location to upload the regula scan view.
*/
type UploadRegulaScanViewOK struct {
	Payload *models.UploadRegulaScanViewOutput
}

func (o *UploadRegulaScanViewOK) Error() string {
	return fmt.Sprintf("[POST /scans/{scan_id}/upload_regula_scan_view][%d] uploadRegulaScanViewOK  %+v", 200, o.Payload)
}

func (o *UploadRegulaScanViewOK) GetPayload() *models.UploadRegulaScanViewOutput {
	return o.Payload
}

func (o *UploadRegulaScanViewOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UploadRegulaScanViewOutput)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadRegulaScanViewBadRequest creates a UploadRegulaScanViewBadRequest with default headers values
func NewUploadRegulaScanViewBadRequest() *UploadRegulaScanViewBadRequest {
	return &UploadRegulaScanViewBadRequest{}
}

/*UploadRegulaScanViewBadRequest handles this case with default header values.

BadRequestError
*/
type UploadRegulaScanViewBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UploadRegulaScanViewBadRequest) Error() string {
	return fmt.Sprintf("[POST /scans/{scan_id}/upload_regula_scan_view][%d] uploadRegulaScanViewBadRequest  %+v", 400, o.Payload)
}

func (o *UploadRegulaScanViewBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UploadRegulaScanViewBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadRegulaScanViewUnauthorized creates a UploadRegulaScanViewUnauthorized with default headers values
func NewUploadRegulaScanViewUnauthorized() *UploadRegulaScanViewUnauthorized {
	return &UploadRegulaScanViewUnauthorized{}
}

/*UploadRegulaScanViewUnauthorized handles this case with default header values.

AuthenticationError
*/
type UploadRegulaScanViewUnauthorized struct {
	Payload *models.AuthenticationError
}

func (o *UploadRegulaScanViewUnauthorized) Error() string {
	return fmt.Sprintf("[POST /scans/{scan_id}/upload_regula_scan_view][%d] uploadRegulaScanViewUnauthorized  %+v", 401, o.Payload)
}

func (o *UploadRegulaScanViewUnauthorized) GetPayload() *models.AuthenticationError {
	return o.Payload
}

func (o *UploadRegulaScanViewUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadRegulaScanViewForbidden creates a UploadRegulaScanViewForbidden with default headers values
func NewUploadRegulaScanViewForbidden() *UploadRegulaScanViewForbidden {
	return &UploadRegulaScanViewForbidden{}
}

/*UploadRegulaScanViewForbidden handles this case with default header values.

AuthorizationError
*/
type UploadRegulaScanViewForbidden struct {
	Payload *models.AuthorizationError
}

func (o *UploadRegulaScanViewForbidden) Error() string {
	return fmt.Sprintf("[POST /scans/{scan_id}/upload_regula_scan_view][%d] uploadRegulaScanViewForbidden  %+v", 403, o.Payload)
}

func (o *UploadRegulaScanViewForbidden) GetPayload() *models.AuthorizationError {
	return o.Payload
}

func (o *UploadRegulaScanViewForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthorizationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadRegulaScanViewNotFound creates a UploadRegulaScanViewNotFound with default headers values
func NewUploadRegulaScanViewNotFound() *UploadRegulaScanViewNotFound {
	return &UploadRegulaScanViewNotFound{}
}

/*UploadRegulaScanViewNotFound handles this case with default header values.

NotFoundError
*/
type UploadRegulaScanViewNotFound struct {
	Payload *models.NotFoundError
}

func (o *UploadRegulaScanViewNotFound) Error() string {
	return fmt.Sprintf("[POST /scans/{scan_id}/upload_regula_scan_view][%d] uploadRegulaScanViewNotFound  %+v", 404, o.Payload)
}

func (o *UploadRegulaScanViewNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UploadRegulaScanViewNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadRegulaScanViewInternalServerError creates a UploadRegulaScanViewInternalServerError with default headers values
func NewUploadRegulaScanViewInternalServerError() *UploadRegulaScanViewInternalServerError {
	return &UploadRegulaScanViewInternalServerError{}
}

/*UploadRegulaScanViewInternalServerError handles this case with default header values.

InternalServerError
*/
type UploadRegulaScanViewInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *UploadRegulaScanViewInternalServerError) Error() string {
	return fmt.Sprintf("[POST /scans/{scan_id}/upload_regula_scan_view][%d] uploadRegulaScanViewInternalServerError  %+v", 500, o.Payload)
}

func (o *UploadRegulaScanViewInternalServerError) GetPayload() *models.InternalServerError {
	return o.Payload
}

func (o *UploadRegulaScanViewInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
