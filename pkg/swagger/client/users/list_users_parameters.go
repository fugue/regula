// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListUsersParams creates a new ListUsersParams object
// with the default values initialized.
func NewListUsersParams() *ListUsersParams {
	var (
		maxItemsDefault       = int64(100)
		offsetDefault         = int64(0)
		orderDirectionDefault = string("desc")
	)
	return &ListUsersParams{
		MaxItems:       &maxItemsDefault,
		Offset:         &offsetDefault,
		OrderDirection: &orderDirectionDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListUsersParamsWithTimeout creates a new ListUsersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListUsersParamsWithTimeout(timeout time.Duration) *ListUsersParams {
	var (
		maxItemsDefault       = int64(100)
		offsetDefault         = int64(0)
		orderDirectionDefault = string("desc")
	)
	return &ListUsersParams{
		MaxItems:       &maxItemsDefault,
		Offset:         &offsetDefault,
		OrderDirection: &orderDirectionDefault,

		timeout: timeout,
	}
}

// NewListUsersParamsWithContext creates a new ListUsersParams object
// with the default values initialized, and the ability to set a context for a request
func NewListUsersParamsWithContext(ctx context.Context) *ListUsersParams {
	var (
		maxItemsDefault       = int64(100)
		offsetDefault         = int64(0)
		orderDirectionDefault = string("desc")
	)
	return &ListUsersParams{
		MaxItems:       &maxItemsDefault,
		Offset:         &offsetDefault,
		OrderDirection: &orderDirectionDefault,

		Context: ctx,
	}
}

// NewListUsersParamsWithHTTPClient creates a new ListUsersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListUsersParamsWithHTTPClient(client *http.Client) *ListUsersParams {
	var (
		maxItemsDefault       = int64(100)
		offsetDefault         = int64(0)
		orderDirectionDefault = string("desc")
	)
	return &ListUsersParams{
		MaxItems:       &maxItemsDefault,
		Offset:         &offsetDefault,
		OrderDirection: &orderDirectionDefault,
		HTTPClient:     client,
	}
}

/*ListUsersParams contains all the parameters to send to the API endpoint
for the list users operation typically these are written to a http.Request
*/
type ListUsersParams struct {

	/*Email
	  Used to filter list to a single invite by email.

	*/
	Email *string
	/*MaxItems
	  Maximum number of items to return.

	*/
	MaxItems *int64
	/*Offset
	  Number of items to skip before returning. This parameter is used when the number of items spans multiple pages.

	*/
	Offset *int64
	/*OrderDirection
	  Direction to sort the items in.

	*/
	OrderDirection *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list users params
func (o *ListUsersParams) WithTimeout(timeout time.Duration) *ListUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list users params
func (o *ListUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list users params
func (o *ListUsersParams) WithContext(ctx context.Context) *ListUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list users params
func (o *ListUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list users params
func (o *ListUsersParams) WithHTTPClient(client *http.Client) *ListUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list users params
func (o *ListUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmail adds the email to the list users params
func (o *ListUsersParams) WithEmail(email *string) *ListUsersParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the list users params
func (o *ListUsersParams) SetEmail(email *string) {
	o.Email = email
}

// WithMaxItems adds the maxItems to the list users params
func (o *ListUsersParams) WithMaxItems(maxItems *int64) *ListUsersParams {
	o.SetMaxItems(maxItems)
	return o
}

// SetMaxItems adds the maxItems to the list users params
func (o *ListUsersParams) SetMaxItems(maxItems *int64) {
	o.MaxItems = maxItems
}

// WithOffset adds the offset to the list users params
func (o *ListUsersParams) WithOffset(offset *int64) *ListUsersParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the list users params
func (o *ListUsersParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrderDirection adds the orderDirection to the list users params
func (o *ListUsersParams) WithOrderDirection(orderDirection *string) *ListUsersParams {
	o.SetOrderDirection(orderDirection)
	return o
}

// SetOrderDirection adds the orderDirection to the list users params
func (o *ListUsersParams) SetOrderDirection(orderDirection *string) {
	o.OrderDirection = orderDirection
}

// WriteToRequest writes these params to a swagger request
func (o *ListUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Email != nil {

		// query param email
		var qrEmail string
		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail
		if qEmail != "" {
			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}

	}

	if o.MaxItems != nil {

		// query param max_items
		var qrMaxItems int64
		if o.MaxItems != nil {
			qrMaxItems = *o.MaxItems
		}
		qMaxItems := swag.FormatInt64(qrMaxItems)
		if qMaxItems != "" {
			if err := r.SetQueryParam("max_items", qMaxItems); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.OrderDirection != nil {

		// query param order_direction
		var qrOrderDirection string
		if o.OrderDirection != nil {
			qrOrderDirection = *o.OrderDirection
		}
		qOrderDirection := qrOrderDirection
		if qOrderDirection != "" {
			if err := r.SetQueryParam("order_direction", qOrderDirection); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
