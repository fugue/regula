// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuditLogEvent audit log event
//
// swagger:model AuditLogEvent
type AuditLogEvent struct {

	// action
	Action string `json:"action,omitempty"`

	// action type
	ActionType string `json:"action_type,omitempty"`

	// error
	Error bool `json:"error,omitempty"`

	// event source
	EventSource string `json:"event_source,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// identity
	Identity *AuditLogEventIdentity `json:"identity,omitempty"`

	// parameters
	Parameters map[string]string `json:"parameters,omitempty"`

	// principal
	Principal string `json:"principal,omitempty"`

	// request context
	RequestContext *AuditLogEventRequestContext `json:"request_context,omitempty"`

	// response code
	ResponseCode int64 `json:"response_code,omitempty"`

	// response message
	ResponseMessage string `json:"response_message,omitempty"`

	// results
	Results []*AuditLogEventResultsItems0 `json:"results"`

	// subject id
	SubjectID string `json:"subject_id,omitempty"`

	// subject kind
	SubjectKind string `json:"subject_kind,omitempty"`

	// subject name
	SubjectName string `json:"subject_name,omitempty"`

	// timestamp
	Timestamp string `json:"timestamp,omitempty"`
}

// Validate validates this audit log event
func (m *AuditLogEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditLogEvent) validateIdentity(formats strfmt.Registry) error {

	if swag.IsZero(m.Identity) { // not required
		return nil
	}

	if m.Identity != nil {
		if err := m.Identity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity")
			}
			return err
		}
	}

	return nil
}

func (m *AuditLogEvent) validateRequestContext(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestContext) { // not required
		return nil
	}

	if m.RequestContext != nil {
		if err := m.RequestContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("request_context")
			}
			return err
		}
	}

	return nil
}

func (m *AuditLogEvent) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditLogEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditLogEvent) UnmarshalBinary(b []byte) error {
	var res AuditLogEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AuditLogEventResultsItems0 audit log event results items0
//
// swagger:model AuditLogEventResultsItems0
type AuditLogEventResultsItems0 struct {

	// action
	Action string `json:"action,omitempty"`

	// entity id
	EntityID string `json:"entity_id,omitempty"`

	// entity kind
	EntityKind string `json:"entity_kind,omitempty"`

	// entity name
	EntityName string `json:"entity_name,omitempty"`
}

// Validate validates this audit log event results items0
func (m *AuditLogEventResultsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuditLogEventResultsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditLogEventResultsItems0) UnmarshalBinary(b []byte) error {
	var res AuditLogEventResultsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
