// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ComplianceByResourceType Compliance results for a resource type.
//
// swagger:model ComplianceByResourceType
type ComplianceByResourceType struct {

	// Count of resources found to be fully compliant with all rules it has been evaulated against.
	Compliant int64 `json:"compliant,omitempty"`

	// List of non-compliant resources and the rules they have violated.
	Noncompliant []*NonCompliantResource `json:"noncompliant"`

	// Name of the resource type.
	ResourceType string `json:"resource_type,omitempty"`

	// Count of all resources evaluated for this resource type.
	Total int64 `json:"total,omitempty"`
}

// Validate validates this compliance by resource type
func (m *ComplianceByResourceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNoncompliant(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComplianceByResourceType) validateNoncompliant(formats strfmt.Registry) error {

	if swag.IsZero(m.Noncompliant) { // not required
		return nil
	}

	for i := 0; i < len(m.Noncompliant); i++ {
		if swag.IsZero(m.Noncompliant[i]) { // not required
			continue
		}

		if m.Noncompliant[i] != nil {
			if err := m.Noncompliant[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("noncompliant" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComplianceByResourceType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComplianceByResourceType) UnmarshalBinary(b []byte) error {
	var res ComplianceByResourceType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
