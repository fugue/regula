// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ComplianceDiff Difference between the old and new compliance state of a resource after an event.
//
// swagger:model ComplianceDiff
type ComplianceDiff struct {

	// The resource's compliance state after an event.
	NewState string `json:"new_state,omitempty"`

	// The resource's compliance state before an event.
	OldState string `json:"old_state,omitempty"`

	// ID of the resource given by the provider.
	ResourceID string `json:"resource_id,omitempty"`

	// Resource type.
	ResourceType string `json:"resource_type,omitempty"`

	// List of rule evaluations that changed state after an event.
	Rules []*ComplianceDiffRulesItems0 `json:"rules"`
}

// Validate validates this compliance diff
func (m *ComplianceDiff) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComplianceDiff) validateRules(formats strfmt.Registry) error {

	if swag.IsZero(m.Rules) { // not required
		return nil
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComplianceDiff) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComplianceDiff) UnmarshalBinary(b []byte) error {
	var res ComplianceDiff
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComplianceDiffRulesItems0 compliance diff rules items0
//
// swagger:model ComplianceDiffRulesItems0
type ComplianceDiffRulesItems0 struct {

	// The compliance families that a rule is evaluated for.
	ComplianceFamilies []string `json:"compliance_families"`

	// The compliance controls that a rule is evaluated for.
	Controls []string `json:"controls"`

	// The rule's error message after an event.
	NewMessage string `json:"new_message,omitempty"`

	// The rule's evaluation state after an event.
	NewState string `json:"new_state,omitempty"`

	// The rule's waived status after an event.
	NewWaived bool `json:"new_waived,omitempty"`

	// The rule's error message before an event.
	OldMessage string `json:"old_message,omitempty"`

	// The rule's evaluation state before an event.
	OldState string `json:"old_state,omitempty"`

	// The rule's waived status before an event.
	OldWaived bool `json:"old_waived,omitempty"`

	// Summary of the rule a resource was evaluated against.
	Summary string `json:"summary,omitempty"`
}

// Validate validates this compliance diff rules items0
func (m *ComplianceDiffRulesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComplianceDiffRulesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComplianceDiffRulesItems0) UnmarshalBinary(b []byte) error {
	var res ComplianceDiffRulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
