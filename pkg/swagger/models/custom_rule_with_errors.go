// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CustomRuleWithErrors A custom rule and any associated syntax errors.
//
// swagger:model CustomRuleWithErrors
type CustomRuleWithErrors struct {
	CustomRule

	// Syntax errors in the rego source code.
	Errors []*CustomRuleError `json:"errors"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CustomRuleWithErrors) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CustomRule
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CustomRule = aO0

	// AO1
	var dataAO1 struct {
		Errors []*CustomRuleError `json:"errors"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Errors = dataAO1.Errors

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CustomRuleWithErrors) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CustomRule)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Errors []*CustomRuleError `json:"errors"`
	}

	dataAO1.Errors = m.Errors

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this custom rule with errors
func (m *CustomRuleWithErrors) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CustomRule
	if err := m.CustomRule.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomRuleWithErrors) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomRuleWithErrors) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomRuleWithErrors) UnmarshalBinary(b []byte) error {
	var res CustomRuleWithErrors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
