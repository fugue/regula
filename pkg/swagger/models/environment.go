// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Environment A managed environment.
//
// swagger:model Environment
type Environment struct {

	// Scan ID of the baseline if baseline is enabled.
	BaselineID string `json:"baseline_id,omitempty"`

	// List of compliance families validated against the environment.
	ComplianceFamilies []string `json:"compliance_families"`

	// Indicates whether drift detection is enabled for the environment.
	Drift bool `json:"drift,omitempty"`

	// ID of the environment.
	ID string `json:"id,omitempty"`

	// Time the current or most recently completed scan for the environment started.
	LastScanAt int64 `json:"last_scan_at,omitempty"`

	// Name of the environment.
	Name string `json:"name,omitempty"`

	// Time the next scan will start.
	NextScanAt int64 `json:"next_scan_at,omitempty"`

	// Name of the cloud service provider for the environment.
	// Enum: [aws aws_govcloud azure google]
	Provider string `json:"provider,omitempty"`

	// provider options
	ProviderOptions *ProviderOptions `json:"provider_options,omitempty"`

	// List of resource types remediated for the environment if remediation is enabled.
	RemediateResourceTypes []string `json:"remediate_resource_types"`

	// Indicates whether remediation is enabled for the environment.
	Remediation bool `json:"remediation,omitempty"`

	// Time in seconds between the end of one scan to the start of the next.
	ScanInterval int64 `json:"scan_interval,omitempty"`

	// Indicates whether the environment should have scans run on a schedule.
	ScanScheduleEnabled bool `json:"scan_schedule_enabled,omitempty"`

	// Status of the current or most recently completed scan for the environment.
	// Enum: [CREATED QUEUED IN_PROGRESS ERROR SUCCESS CANCELED]
	ScanStatus string `json:"scan_status,omitempty"`

	// List of resource types surveyed for the environment.
	SurveyResourceTypes []string `json:"survey_resource_types"`

	// ID of the tenant that owns the environment.
	TenantID string `json:"tenant_id,omitempty"`
}

// Validate validates this environment
func (m *Environment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var environmentTypeProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aws","aws_govcloud","azure","google"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		environmentTypeProviderPropEnum = append(environmentTypeProviderPropEnum, v)
	}
}

const (

	// EnvironmentProviderAws captures enum value "aws"
	EnvironmentProviderAws string = "aws"

	// EnvironmentProviderAwsGovcloud captures enum value "aws_govcloud"
	EnvironmentProviderAwsGovcloud string = "aws_govcloud"

	// EnvironmentProviderAzure captures enum value "azure"
	EnvironmentProviderAzure string = "azure"

	// EnvironmentProviderGoogle captures enum value "google"
	EnvironmentProviderGoogle string = "google"
)

// prop value enum
func (m *Environment) validateProviderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, environmentTypeProviderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Environment) validateProvider(formats strfmt.Registry) error {

	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderEnum("provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

func (m *Environment) validateProviderOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.ProviderOptions) { // not required
		return nil
	}

	if m.ProviderOptions != nil {
		if err := m.ProviderOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provider_options")
			}
			return err
		}
	}

	return nil
}

var environmentTypeScanStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATED","QUEUED","IN_PROGRESS","ERROR","SUCCESS","CANCELED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		environmentTypeScanStatusPropEnum = append(environmentTypeScanStatusPropEnum, v)
	}
}

const (

	// EnvironmentScanStatusCREATED captures enum value "CREATED"
	EnvironmentScanStatusCREATED string = "CREATED"

	// EnvironmentScanStatusQUEUED captures enum value "QUEUED"
	EnvironmentScanStatusQUEUED string = "QUEUED"

	// EnvironmentScanStatusINPROGRESS captures enum value "IN_PROGRESS"
	EnvironmentScanStatusINPROGRESS string = "IN_PROGRESS"

	// EnvironmentScanStatusERROR captures enum value "ERROR"
	EnvironmentScanStatusERROR string = "ERROR"

	// EnvironmentScanStatusSUCCESS captures enum value "SUCCESS"
	EnvironmentScanStatusSUCCESS string = "SUCCESS"

	// EnvironmentScanStatusCANCELED captures enum value "CANCELED"
	EnvironmentScanStatusCANCELED string = "CANCELED"
)

// prop value enum
func (m *Environment) validateScanStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, environmentTypeScanStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Environment) validateScanStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ScanStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateScanStatusEnum("scan_status", "body", m.ScanStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Environment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Environment) UnmarshalBinary(b []byte) error {
	var res Environment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
