// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Event A drift, remediation or compliance event.
//
// swagger:model Event
type Event struct {

	// Difference between the old and new compliance state of the resource.
	ComplianceDiff *ComplianceDiff `json:"compliance_diff,omitempty"`

	// Time the event occurred.
	CreatedAt int64 `json:"created_at,omitempty"`

	// Error message.
	Error string `json:"error,omitempty"`

	// Type of event - drift, remediation, or compliance.
	// Enum: [DRIFT REMEDIATION COMPLIANCE]
	EventType string `json:"event_type,omitempty"`

	// ID of event
	ID string `json:"id,omitempty"`

	// Difference between the old and new state of the resource.
	ResourceDiff *ResourceDiff `json:"resource_diff,omitempty"`
}

// Validate validates this event
func (m *Event) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComplianceDiff(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceDiff(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Event) validateComplianceDiff(formats strfmt.Registry) error {

	if swag.IsZero(m.ComplianceDiff) { // not required
		return nil
	}

	if m.ComplianceDiff != nil {
		if err := m.ComplianceDiff.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compliance_diff")
			}
			return err
		}
	}

	return nil
}

var eventTypeEventTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DRIFT","REMEDIATION","COMPLIANCE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventTypeEventTypePropEnum = append(eventTypeEventTypePropEnum, v)
	}
}

const (

	// EventEventTypeDRIFT captures enum value "DRIFT"
	EventEventTypeDRIFT string = "DRIFT"

	// EventEventTypeREMEDIATION captures enum value "REMEDIATION"
	EventEventTypeREMEDIATION string = "REMEDIATION"

	// EventEventTypeCOMPLIANCE captures enum value "COMPLIANCE"
	EventEventTypeCOMPLIANCE string = "COMPLIANCE"
)

// prop value enum
func (m *Event) validateEventTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, eventTypeEventTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Event) validateEventType(formats strfmt.Registry) error {

	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventTypeEnum("event_type", "body", m.EventType); err != nil {
		return err
	}

	return nil
}

func (m *Event) validateResourceDiff(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceDiff) { // not required
		return nil
	}

	if m.ResourceDiff != nil {
		if err := m.ResourceDiff.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_diff")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Event) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Event) UnmarshalBinary(b []byte) error {
	var res Event
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
