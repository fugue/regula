// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceDiff Difference between the old and new state of a resource after an event.
//
// swagger:model ResourceDiff
type ResourceDiff struct {

	// Description of the changes to the resource's attributes.
	Attributes []*Attribute `json:"attributes"`

	// Type of change which occurred.
	// Enum: [ADDED MODIFIED REMOVED]
	Change string `json:"change,omitempty"`

	// ID of the resource given by the provider.
	ResourceID string `json:"resource_id,omitempty"`

	// Resource type.
	ResourceType string `json:"resource_type,omitempty"`
}

// Validate validates this resource diff
func (m *ResourceDiff) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceDiff) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(m.Attributes); i++ {
		if swag.IsZero(m.Attributes[i]) { // not required
			continue
		}

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var resourceDiffTypeChangePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ADDED","MODIFIED","REMOVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceDiffTypeChangePropEnum = append(resourceDiffTypeChangePropEnum, v)
	}
}

const (

	// ResourceDiffChangeADDED captures enum value "ADDED"
	ResourceDiffChangeADDED string = "ADDED"

	// ResourceDiffChangeMODIFIED captures enum value "MODIFIED"
	ResourceDiffChangeMODIFIED string = "MODIFIED"

	// ResourceDiffChangeREMOVED captures enum value "REMOVED"
	ResourceDiffChangeREMOVED string = "REMOVED"
)

// prop value enum
func (m *ResourceDiff) validateChangeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, resourceDiffTypeChangePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ResourceDiff) validateChange(formats strfmt.Registry) error {

	if swag.IsZero(m.Change) { // not required
		return nil
	}

	// value enum
	if err := m.validateChangeEnum("change", "body", m.Change); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceDiff) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceDiff) UnmarshalBinary(b []byte) error {
	var res ResourceDiff
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
