// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestCustomRuleOutput Results from testing a custom rule.
//
// swagger:model TestCustomRuleOutput
type TestCustomRuleOutput struct {

	// errors
	Errors []*CustomRuleError `json:"errors"`

	// links
	Links map[string]string `json:"links,omitempty"`

	// resources
	Resources []*TestCustomRuleOutputResource `json:"resources"`

	// result
	// Enum: [PASS FAIL UNKNOWN]
	Result string `json:"result,omitempty"`
}

// Validate validates this test custom rule output
func (m *TestCustomRuleOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestCustomRuleOutput) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TestCustomRuleOutput) validateResources(formats strfmt.Registry) error {

	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for i := 0; i < len(m.Resources); i++ {
		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {
			if err := m.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var testCustomRuleOutputTypeResultPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PASS","FAIL","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		testCustomRuleOutputTypeResultPropEnum = append(testCustomRuleOutputTypeResultPropEnum, v)
	}
}

const (

	// TestCustomRuleOutputResultPASS captures enum value "PASS"
	TestCustomRuleOutputResultPASS string = "PASS"

	// TestCustomRuleOutputResultFAIL captures enum value "FAIL"
	TestCustomRuleOutputResultFAIL string = "FAIL"

	// TestCustomRuleOutputResultUNKNOWN captures enum value "UNKNOWN"
	TestCustomRuleOutputResultUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *TestCustomRuleOutput) validateResultEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, testCustomRuleOutputTypeResultPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TestCustomRuleOutput) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(m.Result) { // not required
		return nil
	}

	// value enum
	if err := m.validateResultEnum("result", "body", m.Result); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestCustomRuleOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestCustomRuleOutput) UnmarshalBinary(b []byte) error {
	var res TestCustomRuleOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
