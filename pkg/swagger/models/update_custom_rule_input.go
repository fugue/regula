// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateCustomRuleInput Input request for updating a custom rule
//
// swagger:model UpdateCustomRuleInput
type UpdateCustomRuleInput struct {

	// Description of the custom rule
	Description string `json:"description,omitempty"`

	// Human readable name of the custom rule
	Name string `json:"name,omitempty"`

	// Resource type to which the custom rule applies
	ResourceType string `json:"resource_type,omitempty"`

	// Rego code used by the rule
	RuleText string `json:"rule_text,omitempty"`

	// Severity level of the custom rule.
	// Enum: [Informational Low Medium High Critical]
	Severity string `json:"severity,omitempty"`

	// Status of the custom rule
	// Enum: [ENABLED DISABLED]
	Status string `json:"status,omitempty"`
}

// Validate validates this update custom rule input
func (m *UpdateCustomRuleInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateCustomRuleInputTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Informational","Low","Medium","High","Critical"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateCustomRuleInputTypeSeverityPropEnum = append(updateCustomRuleInputTypeSeverityPropEnum, v)
	}
}

const (

	// UpdateCustomRuleInputSeverityInformational captures enum value "Informational"
	UpdateCustomRuleInputSeverityInformational string = "Informational"

	// UpdateCustomRuleInputSeverityLow captures enum value "Low"
	UpdateCustomRuleInputSeverityLow string = "Low"

	// UpdateCustomRuleInputSeverityMedium captures enum value "Medium"
	UpdateCustomRuleInputSeverityMedium string = "Medium"

	// UpdateCustomRuleInputSeverityHigh captures enum value "High"
	UpdateCustomRuleInputSeverityHigh string = "High"

	// UpdateCustomRuleInputSeverityCritical captures enum value "Critical"
	UpdateCustomRuleInputSeverityCritical string = "Critical"
)

// prop value enum
func (m *UpdateCustomRuleInput) validateSeverityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, updateCustomRuleInputTypeSeverityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UpdateCustomRuleInput) validateSeverity(formats strfmt.Registry) error {

	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

var updateCustomRuleInputTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateCustomRuleInputTypeStatusPropEnum = append(updateCustomRuleInputTypeStatusPropEnum, v)
	}
}

const (

	// UpdateCustomRuleInputStatusENABLED captures enum value "ENABLED"
	UpdateCustomRuleInputStatusENABLED string = "ENABLED"

	// UpdateCustomRuleInputStatusDISABLED captures enum value "DISABLED"
	UpdateCustomRuleInputStatusDISABLED string = "DISABLED"
)

// prop value enum
func (m *UpdateCustomRuleInput) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, updateCustomRuleInputTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UpdateCustomRuleInput) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateCustomRuleInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateCustomRuleInput) UnmarshalBinary(b []byte) error {
	var res UpdateCustomRuleInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
