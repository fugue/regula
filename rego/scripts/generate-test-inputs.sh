#!/usr/bin/env bash
# Copyright 2020-2021 Fugue, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
set -o nounset -o errexit -o pipefail

# Allow overriding terraform version.
TERRAFORM="${TERRAFORM:-terraform}"

function generate_test_input {
  if [[ $# -ne 2 ]]; then
    1>&2 echo "Usage: $0 INFRA_FILE REGO_FILE"
    exit 1
  fi

  local workdir="$(mktemp -d)"
  trap "rm -rf "$workdir"" return
  cp "$1" "$workdir"

  # Switch based on extension.  The inner branches must generate
  # `$workdir/infra.json` which will be spliced into the rego file.
  local extension="${1##*.}"
  if [[ "$extension" == "tf" ]]; then
    # For some reason running this from the current directory sometimes fails; we
    # create a subshell and `cd` to where we copied the terraform configuration.
    (cd "$workdir" &&
        $TERRAFORM init &&
        $TERRAFORM plan -refresh=false -out="plan.tfplan" &&
        $TERRAFORM show -json "plan.tfplan" >"infra.json")
  elif [[ "$extension" == "cfn" ]]; then
    # Convert to standard JSON format using `cfn-flip`.
    cfn-flip -j "$1" >"$workdir/infra.json"
  else
    1>&2 echo "Unknown extension: $extension"
    exit 1
  fi

  local package="$(echo "$(dirname "$2")"/"$(basename "$2" .rego)" | tr '/' '.')"
  echo '# Copyright 2020-2021 Fugue, Inc.' >"$2"
  echo '#' >>"$2"
  echo '# Licensed under the Apache License, Version 2.0 (the "License");' >>"$2"
  echo '# you may not use this file except in compliance with the License.' >>"$2"
  echo '# You may obtain a copy of the License at' >>"$2"
  echo '#' >>"$2"
  echo '#     http://www.apache.org/licenses/LICENSE-2.0' >>"$2"
  echo '#' >>"$2"
  echo '# Unless required by applicable law or agreed to in writing, software' >>"$2"
  echo '# distributed under the License is distributed on an "AS IS" BASIS,' >>"$2"
  echo '# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.' >>"$2"
  echo '# See the License for the specific language governing permissions and' >>"$2"
  echo '# limitations under the License.' >>"$2"
  echo '' >>"$2"
  echo '# This package was automatically generated from:' >>"$2"
  echo '#' >>"$2"
  echo "#     $1" >>"$2"
  echo '#' >>"$2"
  echo '# using `generate_test_inputs.sh` and should not be modified' >>"$2"
  echo '# directly.' >>"$2"
  echo '#' >>"$2"
  echo '# It provides three inputs for testing:' >>"$2"
  echo '# - mock_input: The resource view input as passed to advanced rules' >>"$2"
  echo '# - mock_resources: The resources present as a convenience for tests' >>"$2"
  echo '# - mock_plan_input: The original plan input as generated by terraform' >>"$2"
  echo "package $package" >>"$2"
  echo "import data.fugue.resource_view.resource_view_input" >>"$2"
  echo "mock_input = ret {" >>"$2"
  echo "  ret = resource_view_input with input as mock_plan_input" >>"$2"
  echo "}" >>"$2"
  echo "mock_resources = mock_input.resources" >>"$2"
  echo "mock_plan_input = $(jq '.' <"$workdir/infra.json")" >>"$2"

  1>&2 echo "Generated $2"
}

if [[ $# -eq 0 ]]; then
  for infra_file in $(find tests -name '*_infra\.*'); do
    rego_file="$(echo "$infra_file" | sed 's/\.[^.]*$/.rego/')"
    if [[ ! -f "$rego_file" ]] || [[ "$infra_file" -nt "$rego_file" ]]; then
      1>&2 echo "$infra_file-> $rego_file"
      generate_test_input "$infra_file" "$rego_file"
    else
      1>&2 echo "$rego_file is up to date.  Remove it to force re-generating."
    fi
  done
elif [[ "$1" == "-h" || $# -gt 1 ]]; then
  1>&2 echo "Usage:"
  1>&2 echo "  $0             # Regenerates all test outputs"
  1>&2 echo "  $0 INFRA_FILE  # Regenerates a specific test output"
  exit 1
else
  infra_file="$1"
  rego_file="$(echo "$infra_file" | sed 's/\.[^.]*$/.rego/')"
  1>&2 echo "$infra_file-> $rego_file"
  generate_test_input "$infra_file" "$rego_file"
fi
