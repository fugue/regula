# Copyright 2020-2021 Fugue, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: "2010-09-09"
Description: Invalid public function configuration
Resources:
  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /

  # These don't represent every possible way of specifying FunctionName
  # on permissions, but it should be sufficient to test that our method of
  # associating functions and permissions is working

  # Associating permissions by ARN
  Function:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          exports.handler = (event, context) => {
            console.log(JSON.stringify(event))
          }
      Handler: index.handler
      Role: !GetAtt FunctionRole.Arn
      Runtime: nodejs12.x
  FunctionPermissionByArn:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Function.Arn
      Action: lambda:InvokeFunction
      Principal: "*"

  # Associating permissions by Ref
  Function2:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          exports.handler = (event, context) => {
            console.log(JSON.stringify(event))
          }
      Handler: index.handler
      Role: !GetAtt FunctionRole.Arn
      Runtime: nodejs12.x
  FunctionPermissionByRef:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Function2
      Action: lambda:InvokeFunction
      Principal: "*"

  # Associating permissions by Partial ARN with sub
  Function3:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          exports.handler = (event, context) => {
            console.log(JSON.stringify(event))
          }
      Handler: index.handler
      Role: !GetAtt FunctionRole.Arn
      Runtime: nodejs12.x
  FunctionPermissionByPartialArn:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub "${AWS::AccountId}:${Function3}"
      Action: lambda:InvokeFunction
      Principal: "*"

  # Associating permissions by hardcoded name
  Function4:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: function4
      Code:
        ZipFile: |
          exports.handler = (event, context) => {
            console.log(JSON.stringify(event))
          }
      Handler: index.handler
      Role: !GetAtt FunctionRole.Arn
      Runtime: nodejs12.x
  FunctionPermissionByHardcodedName:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: function4
      Action: lambda:InvokeFunction
      Principal: "*"

  # Associating permissions by hardcoded name and alias
  Function5Alias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref Function5
      FunctionVersion: $LATEST
      Name: v1
  Function5:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: function5
      Code:
        ZipFile: |
          exports.handler = (event, context) => {
            console.log(JSON.stringify(event))
          }
      Handler: index.handler
      Role: !GetAtt FunctionRole.Arn
      Runtime: nodejs12.x
  FunctionPermissionByHardcodedNameAndAlias:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: function5:v1
      Action: lambda:InvokeFunction
      Principal: "*"

  # Associating permissions by hardcoded name and alias, using functions
  Function6Alias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref Function5
      FunctionVersion: $LATEST
      Name: v1
  Function6:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "function-${AWS::Region}"
      Code:
        ZipFile: |
          exports.handler = (event, context) => {
            console.log(JSON.stringify(event))
          }
      Handler: index.handler
      Role: !GetAtt FunctionRole.Arn
      Runtime: nodejs12.x
  FunctionPermissionByNameAndAliasUsingFunctions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Join [":", [!Sub "function-${AWS::Region}", "v2"]]
      Action: lambda:InvokeFunction
      Principal: "*"
